# This file for production
services:

  #nginx

  web:
    image: nginx:latest
    build: 
      dockerfile: ./nginx/DockerFile
    ports: 
      - "81:80"
    restart: unless-stopped

    #there are two way to links your file with ocntainer or copaing your file into container and replace
    #best is docker copy but it will accurate to use it while production
    #here we map our files with container's files not copying beachuese we mainwhile we are working with our fiiles
    #so that's way we use volume to map our files wiht container's files

    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf

    #here /etc is used in Linix for folder that contain configraution
    #inside of it we create a folder nginx

  #php
  app:
    build:
      dockerfile: ./php/DockerFile   
      target: app   
    volumes:

      - /var/www/html/vendor # there only one path it is not for map it for protection mean if we put anything repalce anything inside **/var/www/html** it will not overrite **vendor** folder
        #after sepcify only single path means i want to protect above path
        # means as below - ./app:/var/www/html this will mirror every file into /var/www/html
        # so to previetn vendor folder we did this
          # -- there are two ways for doing this this approch just for develoment for production we will use another approch      
          # for production we will copy the files they'll get copied into the container and they won't need to be touched again once
          # they're in the container in production 
            # so the reason of using this maping instead of copy here it's that when we change anything it will straignt way refeclted instead of build again



      - ./app:/var/www/html
        #./app in the hostmachine will map to our app (folder) in the root directory 
  
  #mysql
  db:
    image: mysql:8.0
    # image: mysql:latest
    volumes:
      # this maping is little bit differnet than last one in last we define folder but here we let docker decide 
      # to do this more sufficient way of doing it because it's not files which i acuttly want to be part of my projects
      # and not something i want to add in gitignore  
      # and so the way i am going to do this here means that i will aculally have to do that and docker will take care of handling it
      # wher i puts and it will optimize my system
      - mysqldata:/var/lib/mysql
      # /var/lib/mysql so here it's the pat in container 
    restart: unless-stopped
      # restart: always
      # this quite comman for lot of contaier you want to sure that they're up and running all the time
      # always: there are option to say always but i tend not to use this in my development envioremtnet (it should be used while production)
      # becasue it sort of becomes like a Hydra i can nver kill the container 
      # so for developemetn the best is use unless-stopped
      # so if anything goes wrong it will resarte to stop this we use unless-stopped means not stop unless we not stopped it physically
    
    # next we need to pass some information to mySQL such as the user,password, db for that we use environment variables

    # here we remove port and envoiroment sesion here
    # port becasue we dont want to exposr our client
    # environmer for that we will use env file later

  #redis


  

# after that we need to create a volume key at same level at we have services key

volumes:
  mysqldata:
  # if we just leave it as it  
  # mysqldata: 
  # then docker will figure out best way and best place to put this data but 
  # the most imporant thing for us to know about this is that our data will be preserved in between eachtime that
  # we spin up Docker compose 










