Docker 

docker compose up
#to start docker compose (for default docker-composer.yml)
When you run docker-compose up without the -d flag, it starts the services in the foreground, and you see the logs of each service in your terminal.
It's useful for debugging, monitoring, and seeing real-time logs from your services.
If you terminate the command (e.g., by pressing Ctrl+C), it will stop the running services.


__________________________________________________________________________

docker-compose up -d
When you run docker-compose up -d, it starts the services in the background (detached mode), and you don't see the logs in your terminal.
It's typically used in production or when you want to run your services in the background without tying up your terminal.
If you terminate your terminal session, the services will keep running.
 If you use docker-compose up -d, you can still view the logs later using docker-compose logs.

Remember that both commands (docker-compose up -d,  docker-compose up) will read your docker-compose.yml file and start the defined services along with any associated configurations. 

--------------------------------------------------------------------------------------------------


docker-compose up --build -d

--build means this will look for DockerFile

--------------------------------------------------------------------------------------------------

docker-compose -f docker-compose.dev.yaml up --build -d 



-f docker-compose.dev.yaml: Specifies the YAML file to be used. In this case, it's docker-compose.dev.yaml.
                                                but if it default docker-compose.yaml then we donet need to spedifiy, 
                                                we only need to spciry file name when it is deffent like here

--build: This option is used to build the images before starting the containers. It's helpful when you've made changes to your Dockerfile or the application code, 
             and you want to ensure that you are using the latest version.
             
-d: This option is used to run the containers in the background (detached mode), allowing you to continue using the terminal for other commands.


--------------------------------------------------------------------------------------------------

.env 

docker-compose -f docker-compose.dev.yaml up --env-file env.dev

--env-file: most we use single one .env file for both development and production envorment but there might be different env files for production and development staging for that 
like .env for production and .env.dev for development for that we will mention which env file is use with --env-file

--------------------------------------------------------------------------------------------------

NOTE: with lot of cloud computing solutions we even dont need env file, there we can enter our env variable 
           using user interface

--------------------------------------------------------------------------------------------------

passing an envorment variable through comand line

$env:VAR1="value1"; $env:VAR2="value2"; docker compose -f docker-compose.yml up -d

$env:XDEBUG_MODE="debug"; docker compose -f docker-compose.dev.yaml up -d      

XDEBUG_MODE=debug: it is env variable and we have passed through command line
it mean instead of defined variables in .env sometime we can defined them in command line

__________________________________________________________________________


docker ps
#to check which containers are running

__________________________________________________________________________

docker ps -a 
This command is used to list all of the containers on the system

__________________________________________________________________________

docker compose ps
#to check which services are running and which parts of networks
# and so let's


__________________________________________________________________________

docker exec -it docker-php_web_1 sh
#to execute shall comand on specif container 
here docker-php_web_1 is container name
exec means execute 
it mean interactive
sh mean shall

-------------------------------------------------

#cat /etc/nginx/conf.d/default.conf

after running command (docker exec -it docker-php_web_1 sh) there will be little hash threre to enter input
to print the content of the existing file
after above command

-------------------------------------------------

#ls -la

The ls -la command is used to list detailed information about files and directories in a directory. Here's a breakdown of the options:
l: This option stands for "long format" and provides detailed information about each file, including permissions, number of links, owner, group, size, and modification time.
a: This option stands for "all" and includes entries that start with a dot (.), which are normally hidden from ls listings. Files and directories that start with a dot are often considered as hidden in Unix-like systems.




__________________________________________________________________________


docker exec -it docker-php-web-1 /bin/bash:

This command runs an interactive Bash shell (/bin/bash) inside the specified Docker container (docker-php-web-1).
Bash is a popular shell with many features and functionalities, and it provides a more interactive and user-friendly environment compared to a simple sh shell.

In most cases, using /bin/bash allows you to work in an environment with more features and a familiar command-line interface. However, if your container has a minimal environment or if you prefer to use a simpler shell, you can use sh.


__________________________________________________________________________



docker build --no-cache -t abc123:php83 -f php/DockerFile .
#to buid own custom image docker image

__________________________________________________________________________








________________________________________________


docker  run packer:version
______________
all runing images shows
docker ps

__________________________________________________________________________

docker --version

docker pull ubuntu



__________________________________________________________________________

before that there was a single file docker-compose.yaml
but i wnat to use different files for production and developmetn 
thatway
docker-compose.dev.yaml for develoment
docker-compose.yaml for production
but letter will learn learn about overrite which is better technique here


__________________________________________________________________________

in php/DockerFile 
where this line

RUN composer install --prefer-dist --no-dev --no-scripts --no-progress --no-interaction

--no-dev means it  will not installed any dev dependencies 
but here we wnat to install dependencies 

other method is 
we will install compose into dirctory and COPY and Volumen just repale and mapt thees into contianer's dirctor 
so for that
cd app
composer install --ignore-platform-req

-------------------------------------------------

composer install --ignore-platform-req

--ignore-platform-req this means ignore platform requirement
                      i use it because if i not use it will see my system's php version if it is diffetn then composer.json then it will
                      create problem beacues we use docker here and it's contaienr will handle it so not to match composer.json php version with my system



__________________________________________________________________________

we crate .env file in root level bacasue there docker-compose file is existing


__________________________________________________________________________

Redis
    Redis is in memory data storage 

__________________________________________________________________________

X debuger

it can be use as a step debugger but i can also be used as
profiler and varieous other things 



google crome extension: there are a google crome extension of x debugger you can install it and 
                        set host like vs-code or other code editon






